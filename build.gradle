buildscript {
    repositories {
        jcenter()
        maven {
            name = "nallar"
            url = "https://repo.nallar.me/"
        }
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'idea'

configurations {
    bundledLibs
    compile {
        extendsFrom bundledLibs
    }
}

ext.mcVersion = "1.10.2"
ext.runMcVersion = "1.10.2"
ext.forgeVersion = "12.18.1.2076"
ext.forgeMappings = "snapshot_20160518"
group = "me.nallar.modpatcherexample" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "LogSpamMustDie"

def calculateVersion() {
    def ver = project.runMcVersion
    if (System.env.BUILD_NUMBER != null)
        return ver + "-jenkins." + System.env.BUILD_NUMBER
    if (project.hasProperty("release"))
        return ver + '-' + project.release
    return ver + "-dev"
}

version = calculateVersion()

repositories {
    maven { url = 'https://repo.nallar.me/' }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 10, 'seconds'
}

dependencies {
    bundledLibs "me.nallar:ModPatcher:$mcVersion-SNAPSHOT:api"
    compile 'org.projectlombok:lombok:1.16.6'
}

tasks.withType(JavaCompile) {
    sourceCompatibility = 7
    targetCompatibility = 7
    options.with {
        encoding = 'UTF-8'
        compilerArgs << "-Xlint:all" << '-Xlint:-path' << '-Xlint:-processing'
    }
}

minecraft {
    version = "${project.mcVersion}-${project.forgeVersion}"
    runDir = "run"
    mappings = project.forgeMappings

    replace "@MOD_VERSION@", project.version
    replace "@MC_VERSION@", runMcVersion
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    filesMatching("mcmod.info") {
        expand 'version': project.version, 'mcversion': runMcVersion
    }
    filesMatching("modpatcher.version") {
        expand 'version': project.version
    }
}

jar {
    from(configurations.bundledLibs.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude "META-INF/**"
    }

    manifest.mainAttributes("FMLCorePlugin": "me.nallar.logspammustdie.CoreMod")
}

wrapper {
    gradleVersion = "3.0"
    def jvmOpts = "-Xmx2G"
    inputs.property("jvmOpts", jvmOpts)
    doLast {
        def optsEnvVar = "DEFAULT_JVM_OPTS"
        scriptFile.write scriptFile.text.replace("$optsEnvVar=\"\"", "$optsEnvVar=\"$jvmOpts\"")
        batchScript.write batchScript.text.replace("set $optsEnvVar=", "set $optsEnvVar=$jvmOpts")
    }
}
